


--TODO finish implementing elevation


function love.load()
  
  require 'rooms'
  require 'commands'
  
  
  currentRoom = rooms[1]
  
  
  --setting up the player as one of only a few globals
  player = {}
  player.x = 0
  player.y = 0
  player.speed = 5
  player.movementTarget = nil
  player.nearbyInteractable = nil
  player.isCovering = false
  player.health = 50
  player.isAlive = true
  player.altitude = 0
  
  
  font = love.graphics.newFont("FiraCode-Regular.ttf", 20)
  
  --dictate what is displayed onscreen
  currentCommand = ""
  
  scenarioTextYPosition = 10
  scenario = ""
  
  
  scenarioPrint("the turret whirrs to life")
  
end

--temporary variable to calculate update runs
tempRunCounter = 0
function love.update(dt)
  
  --TODO hack to make altitude work, not the most sustainable thing
  if player.altitude == 0 then
    player.altitude = nil
  end
  
  
  updateRoom()
  
  if player.health <= 0 then
    
    player.isAlive = false
    
  end
  
  
  --this ion cannon logic should be moved into its own container, but for now it can go here
  if ionCannoner.health > 0 then
    
    if math.fmod(tempRunCounter, 310) == 309 then
      scenarioPrint("The ion turret fires a beam of energy directly at you")
      
      if player.isCovering then
        
        scenarioPrint("the energy blast is absorbed into the surface behind which you cower")
        
      else
        
        scenarioPrint("the energy blast burns you to a crisp")
        player.health = 0
        love.graphics.setColor( 255, 0, 0)
        
      end
      
    elseif math.fmod(tempRunCounter, 310) == 10 then
      scenarioPrint("The ion turret begins to charge a new shot")
    end
  
  else
    
    --when the turret dies it does nothing that's handled in the entity system with which all this code will later be integrated
    
  end
  
  tempRunCounter = tempRunCounter + 1
  
end

function love.keypressed(key)
  
  if key == "backspace" then
    
    currentCommand = string.sub(currentCommand, 0, #currentCommand-1)
    
  elseif key == "space" then
    
    currentCommand = currentCommand..(" ")
    
  elseif not player.isAlive then
    
    scenarioPrint("the player is no longer alive")
    
  elseif key == "return" then
    
    --execute the command the user ran (stored in a table with string keys and command function values)
    local seperatorIdx = string.find(currentCommand, " ") 
    
    local calledCommand
    local params
    
    
    if seperatorIdx ~= nil then
      
      calledCommand = string.sub(currentCommand, 0, seperatorIdx-1)
      params = string.sub(currentCommand, seperatorIdx+1, string.len(currentCommand))
      
    else
      
      calledCommand = currentCommand
      params = nil
      
    end
    
    
    if commands[calledCommand] == nil then
      
      scenarioPrint("invalid command!")
      
    else
    
      --actually running the command
      --stops the player from doing other stuff if they are taking cover
      if player.isCovering and calledCommand ~= "c" and calledCommand ~= "l" then
        scenarioPrint("You can't do that, you're taking cover")
      else
        commands[calledCommand](params)
      end
    
    end
    
        
    currentCommand = ""
    
  else
    currentCommand = currentCommand..key
  
  end
  
end


--global helper functions

--helper function to print things to the scenario
function scenarioPrint(text)
  
  scenario = scenario .. "\n" .. text
  
end

function getDistance(x1, y1, x2, y2)
  
  return math.sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1))
  
end



function love.draw()
  
  love.graphics.setFont(font)
  
  --TODO starts at 2 because of the extra newline every time the program runs
  local lineCount = 2
  for line in string.gmatch(scenario, "([^\n]+)") do
    lineCount = lineCount + 1
    
    --accounting for lines generated by text wrapping
    lineCount = lineCount + math.floor(font:getWidth(line)/(love.graphics.getWidth()-15))
    
  end
  
   if scenarioTextYPosition + font:getHeight()*lineCount > (love.graphics.getHeight() - 125) then
    scenarioTextYPosition = scenarioTextYPosition - 10
  end
  
 
  love.graphics.printf(scenario, 10, scenarioTextYPosition, love.graphics.getWidth()-15, "left")

  --drawing the user command area
  love.graphics.rectangle('fill', 0, love.graphics.getHeight() - 120, love.graphics.getWidth(), 10)
  
  
  love.graphics.print(currentCommand, 20, love.graphics.getHeight()-100)
  
  --command prompt
  if math.fmod(love.timer.getTime(), 0.7) > 0.35 then 
    love.graphics.print(">", 2, love.graphics.getHeight()-100)
  end
  
end